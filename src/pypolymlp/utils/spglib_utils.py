"""Utilities to use spglib."""

import argparse

import numpy as np
import spglib

from pypolymlp.core.data_format import PolymlpStructure
from pypolymlp.core.interface_vasp import Poscar
from pypolymlp.utils.vasp_utils import print_poscar, write_poscar_file


class SymCell:

    def __init__(
        self,
        poscar_name: str = None,
        st: PolymlpStructure = None,
        symprec: float = 1e-4,
    ):
        if poscar_name is not None:
            st = Poscar(poscar_name).structure

        if st.comment is not None:
            self.comment = st.comment
        else:
            self.comment = "Generated by pypolymlp and spglib"

        self.n_types = len(st.n_atoms)
        self.cell = (
            np.array(st.axis).T,
            np.array(st.positions).T,
            np.array(st.types),
        )

        self.element_map = dict()
        for e, t in zip(st.elements, st.types):
            self.element_map[t] = e

        self.symprec = symprec

    def refine_cell(self, standardize_cell=False) -> PolymlpStructure:

        if standardize_cell == False:
            try:
                lattice1, position1, types1 = spglib.refine_cell(
                    self.cell, symprec=self.symprec
                )
            except:
                raise TypeError
        else:
            try:
                lattice1, position1, types1 = spglib.standardize_cell(
                    self.cell, symprec=self.symprec
                )
            except:
                raise TypeError

        type_list = list(range(0, self.n_types))

        position1_tmp, types1_tmp = [], []
        for t_ref in type_list:
            for i, t in enumerate(types1):
                if t == t_ref:
                    position1_tmp.append(position1[i])
                    types1_tmp.append(t)
        position1, types1 = np.array(position1_tmp), types1_tmp

        n_atoms1 = [types1.count(t_ref) for t_ref in type_list]
        elements1 = [self.element_map[t] for t in types1]

        st = PolymlpStructure(
            axis=lattice1.T,
            positions=position1.T,
            n_atoms=n_atoms1,
            elements=elements1,
            types=types1,
            volume=np.linalg.det(lattice1),
            comment=self.comment,
        )
        return st

    def get_spacegroup(self):
        return spglib.get_spacegroup(self.cell, symprec=self.symprec)

    def get_spacegroup_multiple_prec(self, symprecs=[1e-2, 1e-3, 1e-4, 1e-5]):
        return [spglib.get_spacegroup(self.cell, symprec=p) for p in symprecs]


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--poscar", type=str, help="poscar file name")
    parser.add_argument(
        "--symprec",
        type=float,
        default=1e-4,
        help="numerical precision for finding symmetry",
    )
    parser.add_argument("--refine_cell", action="store_true", help="refine cell")
    parser.add_argument(
        "--standardize_cell", action="store_true", help="standardize cell"
    )
    parser.add_argument("--space_group", action="store_true", help="get space group")

    args = parser.parse_args()
    sc = SymCell(args.poscar, symprec=args.symprec)

    if args.refine_cell:
        st = sc.refine_cell()
        print_poscar(st)
        write_poscar_file(st)
    elif args.standardize_cell:
        st = sc.refine_cell(standardize_cell=True)
        print_poscar(st)
        write_poscar_file(st)

    if args.space_group:
        print(" space_group = ", sc.get_spacegroup())
